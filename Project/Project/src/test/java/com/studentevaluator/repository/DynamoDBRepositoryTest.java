package com.studentevaluator.repository;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.localstack.LocalStackContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.testcontainers.utility.DockerImageName;
import software.amazon.awssdk.services.dynamodb.model.AttributeValue;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.testcontainers.containers.localstack.LocalStackContainer.Service.DYNAMODB;

/**
 * Integration tests for DynamoDBRepository using LocalStack testcontainer.
 */
@SpringBootTest
@Testcontainers
class DynamoDBRepositoryTest {
    
    @Container
    static LocalStackContainer localstack = new LocalStackContainer(DockerImageName.parse("localstack/localstack:3.0"))
            .withServices(DYNAMODB)
            .withReuse(true);
    
    @DynamicPropertySource
    static void configureProperties(DynamicPropertyRegistry registry) {
        registry.add("aws.dynamodb.endpoint", () -> localstack.getEndpointOverride(DYNAMODB).toString());
        registry.add("aws.region", () -> localstack.getRegion());
    }
    
    @Autowired
    private DynamoDBRepository dynamoDBRepository;
    
    @BeforeEach
    void setUp() {
        // Ensure table exists before each test
        dynamoDBRepository.ensureTableExists();
        
        // Clean up any existing test data
        // Note: In a real scenario, you might want to use a different table for tests
        // or implement a cleanup method
    }
    
    @Test
    void testStoreAndRetrieveEvaluationLog() {
        String evaluationId = "EVAL001";
        String logType = "COMPILATION";
        String logData = "Compilation successful. Generated bytecode for class StudentSubmission.";
        String studentId = "STU001";
        String assignmentId = "ASG001";
        
        // Store log
        dynamoDBRepository.storeEvaluationLog(evaluationId, logType, logData, studentId, assignmentId);
        
        // Retrieve logs
        List<Map<String, AttributeValue>> logs = dynamoDBRepository.getEvaluationLogs(evaluationId);
        
        assertThat(logs).hasSize(1);
        Map<String, AttributeValue> log = logs.get(0);
        assertThat(log.get("evaluation_id").s()).isEqualTo(evaluationId);
        assertThat(log.get("log_type").s()).isEqualTo(logType);
        assertThat(log.get("log_data").s()).isEqualTo(logData);
        assertThat(log.get("student_id").s()).isEqualTo(studentId);
        assertThat(log.get("assignment_id").s()).isEqualTo(assignmentId);
        assertThat(log.get("timestamp")).isNotNull();
    }
    
    @Test
    void testStoreCompilationLog() {
        String evaluationId = "EVAL002";
        String compilationOutput = "javac: error: cannot find symbol\n  symbol: variable x\n  location: class Test";
        String studentId = "STU002";
        String assignmentId = "ASG002";
        
        dynamoDBRepository.storeCompilationLog(evaluationId, compilationOutput, studentId, assignmentId);
        
        List<Map<String, AttributeValue>> logs = dynamoDBRepository.getEvaluationLogs(evaluationId);
        assertThat(logs).hasSize(1);
        assertThat(logs.get(0).get("log_type").s()).isEqualTo("COMPILATION");
        assertThat(logs.get(0).get("log_data").s()).isEqualTo(compilationOutput);
    }
    
    @Test
    void testStoreTestExecutionLog() {
        String evaluationId = "EVAL003";
        String testOutput = "Running tests...\nTest testBasicFunctionality: PASSED\nTest testEdgeCases: FAILED\nTotal: 1 passed, 1 failed";
        String studentId = "STU003";
        String assignmentId = "ASG003";
        
        dynamoDBRepository.storeTestExecutionLog(evaluationId, testOutput, studentId, assignmentId);
        
        List<Map<String, AttributeValue>> logs = dynamoDBRepository.getEvaluationLogs(evaluationId);
        assertThat(logs).hasSize(1);
        assertThat(logs.get(0).get("log_type").s()).isEqualTo("TEST_EXECUTION");
        assertThat(logs.get(0).get("log_data").s()).isEqualTo(testOutput);
    }
    
    @Test
    void testStoreErrorLog() {
        String evaluationId = "EVAL004";
        String errorMessage = "java.lang.RuntimeException: Timeout occurred during test execution\n\tat com.evaluator.TestRunner.run(TestRunner.java:45)";
        String studentId = "STU004";
        String assignmentId = "ASG004";
        
        dynamoDBRepository.storeErrorLog(evaluationId, errorMessage, studentId, assignmentId);
        
        List<Map<String, AttributeValue>> logs = dynamoDBRepository.getEvaluationLogs(evaluationId);
        assertThat(logs).hasSize(1);
        assertThat(logs.get(0).get("log_type").s()).isEqualTo("ERROR");
        assertThat(logs.get(0).get("log_data").s()).isEqualTo(errorMessage);
    }
    
    @Test
    void testMultipleLogsForSameEvaluation() {
        String evaluationId = "EVAL005";
        String studentId = "STU005";
        String assignmentId = "ASG005";
        
        // Store multiple logs for the same evaluation
        dynamoDBRepository.storeCompilationLog(evaluationId, "Compilation started", studentId, assignmentId);
        dynamoDBRepository.storeCompilationLog(evaluationId, "Compilation completed successfully", studentId, assignmentId);
        dynamoDBRepository.storeTestExecutionLog(evaluationId, "Running JUnit tests", studentId, assignmentId);
        dynamoDBRepository.storeTestExecutionLog(evaluationId, "All tests passed", studentId, assignmentId);
        
        List<Map<String, AttributeValue>> logs = dynamoDBRepository.getEvaluationLogs(evaluationId);
        assertThat(logs).hasSize(4);
        
        // Verify logs are sorted by timestamp (ascending)
        for (int i = 1; i < logs.size(); i++) {
            String prevTimestamp = logs.get(i - 1).get("timestamp").s();
            String currTimestamp = logs.get(i).get("timestamp").s();
            assertThat(currTimestamp).isGreaterThanOrEqualTo(prevTimestamp);
        }
    }
    
    @Test
    void testGetEvaluationLogsByType() {
        String evaluationId = "EVAL006";
        String studentId = "STU006";
        String assignmentId = "ASG006";
        
        // Store different types of logs
        dynamoDBRepository.storeCompilationLog(evaluationId, "Compilation log 1", studentId, assignmentId);
        dynamoDBRepository.storeCompilationLog(evaluationId, "Compilation log 2", studentId, assignmentId);
        dynamoDBRepository.storeTestExecutionLog(evaluationId, "Test execution log", studentId, assignmentId);
        dynamoDBRepository.storeErrorLog(evaluationId, "Error log", studentId, assignmentId);
        
        // Get only compilation logs
        List<Map<String, AttributeValue>> compilationLogs = 
                dynamoDBRepository.getEvaluationLogsByType(evaluationId, "COMPILATION");
        assertThat(compilationLogs).hasSize(2);
        
        // Get only test execution logs
        List<Map<String, AttributeValue>> testLogs = 
                dynamoDBRepository.getEvaluationLogsByType(evaluationId, "TEST_EXECUTION");
        assertThat(testLogs).hasSize(1);
        
        // Get only error logs
        List<Map<String, AttributeValue>> errorLogs = 
                dynamoDBRepository.getEvaluationLogsByType(evaluationId, "ERROR");
        assertThat(errorLogs).hasSize(1);
    }
    
    @Test
    void testGetEvaluationLogsInTimeRange() {
        String evaluationId = "EVAL007";
        String studentId = "STU007";
        String assignmentId = "ASG007";
        
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime startTime = now.minusMinutes(5);
        LocalDateTime endTime = now.plusMinutes(5);
        
        // Store a log (should be within the time range)
        dynamoDBRepository.storeCompilationLog(evaluationId, "Log within range", studentId, assignmentId);
        
        List<Map<String, AttributeValue>> logsInRange = 
                dynamoDBRepository.getEvaluationLogsInTimeRange(evaluationId, startTime, endTime);
        assertThat(logsInRange).hasSize(1);
        
        // Test with a range that doesn't include the log
        LocalDateTime futureStart = now.plusMinutes(10);
        LocalDateTime futureEnd = now.plusMinutes(20);
        List<Map<String, AttributeValue>> noLogsInRange = 
                dynamoDBRepository.getEvaluationLogsInTimeRange(evaluationId, futureStart, futureEnd);
        assertThat(noLogsInRange).isEmpty();
    }
    
    @Test
    void testDeleteEvaluationLogs() {
        String evaluationId = "EVAL008";
        String studentId = "STU008";
        String assignmentId = "ASG008";
        
        // Store multiple logs
        dynamoDBRepository.storeCompilationLog(evaluationId, "Log 1", studentId, assignmentId);
        dynamoDBRepository.storeTestExecutionLog(evaluationId, "Log 2", studentId, assignmentId);
        dynamoDBRepository.storeErrorLog(evaluationId, "Log 3", studentId, assignmentId);
        
        // Verify logs exist
        List<Map<String, AttributeValue>> logs = dynamoDBRepository.getEvaluationLogs(evaluationId);
        assertThat(logs).hasSize(3);
        
        // Delete logs
        int deletedCount = dynamoDBRepository.deleteEvaluationLogs(evaluationId);
        assertThat(deletedCount).isEqualTo(3);
        
        // Verify logs are deleted
        List<Map<String, AttributeValue>> logsAfterDeletion = dynamoDBRepository.getEvaluationLogs(evaluationId);
        assertThat(logsAfterDeletion).isEmpty();
    }
    
    @Test
    void testGetBatchEvaluationLogs() {
        String evaluationId1 = "EVAL009";
        String evaluationId2 = "EVAL010";
        String studentId = "STU009";
        String assignmentId = "ASG009";
        
        // Store logs for multiple evaluations
        dynamoDBRepository.storeCompilationLog(evaluationId1, "Log for eval 1", studentId, assignmentId);
        dynamoDBRepository.storeTestExecutionLog(evaluationId1, "Test log for eval 1", studentId, assignmentId);
        dynamoDBRepository.storeCompilationLog(evaluationId2, "Log for eval 2", studentId, assignmentId);
        
        List<String> evaluationIds = List.of(evaluationId1, evaluationId2);
        Map<String, List<Map<String, AttributeValue>>> batchLogs = 
                dynamoDBRepository.getBatchEvaluationLogs(evaluationIds);
        
        assertThat(batchLogs).hasSize(2);
        assertThat(batchLogs.get(evaluationId1)).hasSize(2);
        assertThat(batchLogs.get(evaluationId2)).hasSize(1);
    }
    
    @Test
    void testCountEvaluationLogs() {
        String evaluationId = "EVAL011";
        String studentId = "STU011";
        String assignmentId = "ASG011";
        
        // Initially no logs
        int initialCount = dynamoDBRepository.countEvaluationLogs(evaluationId);
        assertThat(initialCount).isEqualTo(0);
        
        // Store some logs
        dynamoDBRepository.storeCompilationLog(evaluationId, "Log 1", studentId, assignmentId);
        dynamoDBRepository.storeTestExecutionLog(evaluationId, "Log 2", studentId, assignmentId);
        
        int finalCount = dynamoDBRepository.countEvaluationLogs(evaluationId);
        assertThat(finalCount).isEqualTo(2);
    }
    
    @Test
    void testStoreLogWithNullOptionalFields() {
        String evaluationId = "EVAL012";
        String logType = "SYSTEM";
        String logData = "System log without student or assignment context";
        
        // Store log without student and assignment IDs
        dynamoDBRepository.storeEvaluationLog(evaluationId, logType, logData, null, null);
        
        List<Map<String, AttributeValue>> logs = dynamoDBRepository.getEvaluationLogs(evaluationId);
        assertThat(logs).hasSize(1);
        
        Map<String, AttributeValue> log = logs.get(0);
        assertThat(log.get("evaluation_id").s()).isEqualTo(evaluationId);
        assertThat(log.get("log_type").s()).isEqualTo(logType);
        assertThat(log.get("log_data").s()).isEqualTo(logData);
        assertThat(log.get("student_id")).isNull();
        assertThat(log.get("assignment_id")).isNull();
    }
    
    @Test
    void testEnsureTableExists() {
        // This test verifies that the table creation/verification works
        // The method is called in @BeforeEach, so if we reach this point, it worked
        assertThat(true).isTrue();
        
        // Call it again to test the "table already exists" path
        dynamoDBRepository.ensureTableExists();
        assertThat(true).isTrue();
    }
}